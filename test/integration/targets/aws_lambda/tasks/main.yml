---
#
#  Author: Michael De La Rue
#  based on ec2_key.yml + lambda.py

- block:

    # ============================================================
    - name: test with no parameters
      lambda:
      register: result
      ignore_errors: true

    - name: assert failure when called with no parameters
      assert:
        that:
           - 'result.failed'
           - 'result.msg.startswith("missing required arguments: name")'

    # ============================================================
    - name: test with no parameters except state absent
      lambda:
        state=absent
      register: result
      ignore_errors: true

    - name: assert failure when called with no parameters
      assert:
        that:
           - 'result.failed'
           - 'result.msg.startswith("missing required arguments: name")'

    # ============================================================
    - name: test with no role or handler
      lambda:
        name=ansible-testing-fake-should-not-be-created
        runtime="python2.7"
      register: result
      ignore_errors: true

    - name: assert failure when called with no parameters
      assert:
        that:
           - 'result.failed'
           - 'result.msg.startswith("state is present but the following are missing: handler")'

    # ============================================================
    - name: test with all module required variables but no region
      lambda:
        name=ansible-testing-fake-should-not-be-created
        runtime="python2.7"
        handler="no-handler"
        role=arn:fake-role-doesnt-exist
      register: result
      ignore_errors: true

    - name: assert failure when called with only 'name'
      assert:
        that:
           - 'result.failed'
           - 'result.msg == "region must be specified"'

    # ============================================================
    # direct zip file upload
    - name: move lambda into place for archive module
      copy:
        src: "mini_lambda.py"
        dest: "{{output_dir}}/mini_lambda.py"

    - name: bundle lambda into a zip
      archive:
        format: zip
        path: "{{output_dir}}/mini_lambda.py"
        dest: "{{output_dir}}/mini_lambda.zip"
      register: zip_res

    - name: test state=present - upload the lambda
      lambda:
        name="{{lambda_function_name}}"
        runtime="python2.7"
        handler="mini_lambda.handler"
        role="ansible_lambda_role"
        ec2_region='{{ec2_region}}'
        ec2_access_key='{{ec2_access_key}}'
        ec2_secret_key='{{ec2_secret_key}}'
        security_token='{{security_token}}'
        zip_file="{{zip_res.dest}}"
      register: result

    - name: assert lambda manages to respond as expected
      assert:
        that:
           - '"failed" not in result'

    - name: test lambda works
      execute_lambda:
        name: "{{lambda_function_name}}"
        payload:
          name: "Mr Ansible Tests"
        ec2_region: '{{ec2_region}}'
        ec2_access_key: '{{ec2_access_key}}'
        ec2_secret_key: '{{ec2_secret_key}}'
        security_token: '{{security_token}}'
      register: result

    - name: assert lambda manages to respond as expected
      assert:
        that:
           - '"failed" not in result'
           - 'result.result.output.message == "hello Mr Ansible Tests"'

    # ============================================================
    # upload via s3 bucket - multi function


    # ============================================================
    # update already existing function


  always:

    # ============================================================
    - name: test state=absent (expect changed=false)
      lambda:
        name="{{lambda_function_name}}"
        ec2_region='{{ec2_region}}'
        ec2_access_key='{{ec2_access_key}}'
        ec2_secret_key='{{ec2_secret_key}}'
        security_token='{{security_token}}'
        state=absent
      register: result

    - name: assert state=absent
      assert:
        that:
           - '"failed" not in result'
